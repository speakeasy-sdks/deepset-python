"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

import requests as requests_http
from . import utils
from deepset_cloud.models import operations, shared
from typing import Any, Optional

class APIToken:
    _client: requests_http.Session
    _security_client: requests_http.Session
    _server_url: str
    _language: str
    _sdk_version: str
    _gen_version: str

    def __init__(self, client: requests_http.Session, security_client: requests_http.Session, server_url: str, language: str, sdk_version: str, gen_version: str) -> None:
        self._client = client
        self._security_client = security_client
        self._server_url = server_url
        self._language = language
        self._sdk_version = sdk_version
        self._gen_version = gen_version
        
    
    def create_token(self, request: shared.CreateToken, security: operations.CreateTokenAPIV1TokenPostSecurity) -> operations.CreateTokenAPIV1TokenPostResponse:
        r"""Create Token
        Creates the API key that you can use to connect deepset Cloud to your application.
        """
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/api/v1/token'
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "request", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('POST', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.CreateTokenAPIV1TokenPostResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.APITokenResult])
                res.api_token_result = out
        elif http_res.status_code == 422:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.HTTPValidationError])
                res.http_validation_error = out

        return res

    
    def list(self, request: operations.ListTokensAPIV1TokenGetRequest, security: operations.ListTokensAPIV1TokenGetSecurity) -> operations.ListTokensAPIV1TokenGetResponse:
        r"""Get Tokens [private]
        Returns all API keys present in deepset Cloud together with their properties. This is an endpoint we use internally. This means it can change anytime so bear this in mind if you want to use it.
        """
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/api/v1/token'
        
        query_params = utils.get_query_params(operations.ListTokensAPIV1TokenGetRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.ListTokensAPIV1TokenGetResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.TokenPagination])
                res.token_pagination = out
        elif http_res.status_code == 422:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.HTTPValidationError])
                res.http_validation_error = out

        return res

    
    def remove(self, request: operations.RemoveTokenAPIV1TokenAPITokenIDDeleteRequest, security: operations.RemoveTokenAPIV1TokenAPITokenIDDeleteSecurity) -> operations.RemoveTokenAPIV1TokenAPITokenIDDeleteResponse:
        r"""Remove Token [private]
        Deletes the API key. This is an endpoint we use internally. This means it can change anytime so bear this in mind if you want to use it.
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.RemoveTokenAPIV1TokenAPITokenIDDeleteRequest, base_url, '/api/v1/token/{api_token_id}', request)
        
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('DELETE', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.RemoveTokenAPIV1TokenAPITokenIDDeleteResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[Any])
                res.remove_token_api_v1_token_api_token_id_delete_200_application_json_any = out
        elif http_res.status_code == 422:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.HTTPValidationError])
                res.http_validation_error = out

        return res

    