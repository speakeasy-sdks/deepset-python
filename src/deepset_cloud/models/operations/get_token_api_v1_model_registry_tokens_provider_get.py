"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
import requests as requests_http
from ..shared import httpvalidationerror as shared_httpvalidationerror
from ..shared import modelregistrytoken as shared_modelregistrytoken
from enum import Enum
from typing import Optional

class GetTokenAPIV1ModelRegistryTokensProviderGetProviderModelProvider(str, Enum):
    r"""The provider of the model registry"""
    HUGGINGFACE = 'huggingface'
    OPENAI = 'openai'
    COHERE = 'cohere'


@dataclasses.dataclass
class GetTokenAPIV1ModelRegistryTokensProviderGetRequest:
    provider: GetTokenAPIV1ModelRegistryTokensProviderGetProviderModelProvider = dataclasses.field(metadata={'path_param': { 'field_name': 'provider', 'style': 'simple', 'explode': False }})
    r"""The provider of the model registry"""
    



@dataclasses.dataclass
class GetTokenAPIV1ModelRegistryTokensProviderGetResponse:
    content_type: str = dataclasses.field()
    r"""HTTP response content type for this operation"""
    status_code: int = dataclasses.field()
    r"""HTTP response status code for this operation"""
    http_validation_error: Optional[shared_httpvalidationerror.HTTPValidationError] = dataclasses.field(default=None)
    r"""Validation Error"""
    model_registry_token: Optional[shared_modelregistrytoken.ModelRegistryToken] = dataclasses.field(default=None)
    r"""Successful Response"""
    raw_response: Optional[requests_http.Response] = dataclasses.field(default=None)
    r"""Raw HTTP response; suitable for custom response parsing"""
    

