"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
import requests as requests_http
from ...models.components import paginatedsessionfile as components_paginatedsessionfile
from enum import Enum
from typing import Optional

class FilterForIngestionStatus(str, Enum):
    r"""Use this option to filter for files that are still being ingested or that were already ingested."""
    PENDING = 'PENDING'
    FAILED = 'FAILED'
    FINISHED = 'FINISHED'


@dataclasses.dataclass
class GetSessionFilesAPIV1WorkspacesWorkspaceNameUploadSessionsSessionIDFilesGetRequest:
    session_id: str = dataclasses.field(metadata={'path_param': { 'field_name': 'session_id', 'style': 'simple', 'explode': False }})
    r"""The ID of the session."""
    workspace_name: str = dataclasses.field(metadata={'path_param': { 'field_name': 'workspace_name', 'style': 'simple', 'explode': False }})
    r"""Type the name of the workspace."""
    after: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'after', 'style': 'form', 'explode': True }})
    r"""Enter an ID if you want to see all entries after this ID."""
    before: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'before', 'style': 'form', 'explode': True }})
    r"""Enter an ID if you want to see all entries before this ID."""
    ingestion_status: Optional[FilterForIngestionStatus] = dataclasses.field(default=FilterForIngestionStatus.FAILED, metadata={'query_param': { 'field_name': 'ingestion_status', 'style': 'form', 'explode': True }})
    r"""Use this option to filter for files that are still being ingested or that were already ingested."""
    limit: Optional[int] = dataclasses.field(default=10, metadata={'query_param': { 'field_name': 'limit', 'style': 'form', 'explode': True }})
    r"""How many entries do you want to display? Leaving this field empty keeps the default and max 10 results are returned."""
    page_number: Optional[int] = dataclasses.field(default=1, metadata={'query_param': { 'field_name': 'page_number', 'style': 'form', 'explode': True }})
    r"""Which page do you want to see? Type the number."""
    



@dataclasses.dataclass
class GetSessionFilesAPIV1WorkspacesWorkspaceNameUploadSessionsSessionIDFilesGetResponse:
    content_type: str = dataclasses.field()
    r"""HTTP response content type for this operation"""
    status_code: int = dataclasses.field()
    r"""HTTP response status code for this operation"""
    raw_response: requests_http.Response = dataclasses.field()
    r"""Raw HTTP response; suitable for custom response parsing"""
    paginated_session_file: Optional[components_paginatedsessionfile.PaginatedSessionFile] = dataclasses.field(default=None)
    r"""Returns a list of files registered to the session."""
    

