"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from dataclasses_json import Undefined, dataclass_json
from deepset_cloud import utils
from typing import Optional



@dataclasses.dataclass
class QueryDocumentsParamsHaystackFilters:
    r"""Filters you can use to narrow down the search. For more information, see [metadata filtering](https://docs.haystack.deepset.ai/docs/metadata-filtering)."""
    



@dataclass_json(undefined=Undefined.EXCLUDE)

@dataclasses.dataclass
class QueryDocumentsParams:
    all_terms_must_match: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('all_terms_must_match'), 'exclude': lambda f: f is None }})
    r"""Specifies if returned documents must match all query terms."""
    custom_query: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('custom_query'), 'exclude': lambda f: f is None }})
    r"""Sends a custom query."""
    filters: Optional[QueryDocumentsParamsHaystackFilters] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('filters'), 'exclude': lambda f: f is None }})
    r"""Filters you can use to narrow down the search. For more information, see [metadata filtering](https://docs.haystack.deepset.ai/docs/metadata-filtering)."""
    query: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('query'), 'exclude': lambda f: f is None }})
    r"""The search query"""
    query_emb: Optional[list[float]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('query_emb'), 'exclude': lambda f: f is None }})
    r"""The vector representation of the query."""
    return_embedding: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('return_embedding'), 'exclude': lambda f: f is None }})
    r"""Returns vector representations of the documents."""
    top_k: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('top_k'), 'exclude': lambda f: f is None }})
    r"""The number of results to return."""
    use_prefiltering: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('use_prefiltering'), 'exclude': lambda f: f is None }})
    r"""Specifies if documents should be prefiltered in the document store instead of within the retriever."""
    

