"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from .deepsetcloudspan import DeepsetCloudSpan
from dataclasses_json import Undefined, dataclass_json
from deepset_cloud import utils
from enum import Enum
from typing import Any, List, Optional, Union


@dataclasses.dataclass
class Two:
    pass


@dataclasses.dataclass
class FileReferenceObjectDeprecatedUseFilesInstead:
    r"""Object containing the `file_id` and `name` of a file. This is used to associate a document with a file."""
    



@dataclasses.dataclass
class Files:
    pass


@dataclasses.dataclass
class MetadataOfFile:
    r"""The metadata of this document."""
    


class AnswerType(str, Enum):
    r"""Type of the answer."""
    GENERATIVE = 'generative'
    EXTRACTIVE = 'extractive'
    OTHER = 'other'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class DeepsetCloudAnswer:
    answer: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('answer') }})
    type: AnswerType = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('type') }})
    r"""Type of the answer."""
    context: Optional[Union[str, Two, List[Any]]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('context'), 'exclude': lambda f: f is None }})
    r"""Context of the answer."""
    document_id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('document_id'), 'exclude': lambda f: f is None }})
    r"""ID of the document"""
    document_ids: Optional[List[str]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('document_ids'), 'exclude': lambda f: f is None }})
    r"""IDs of the document"""
    file: Optional[FileReferenceObjectDeprecatedUseFilesInstead] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('file'), 'exclude': lambda f: f is None }})
    r"""Object containing the `file_id` and `name` of a file. This is used to associate a document with a file."""
    files: Optional[List[Files]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('files'), 'exclude': lambda f: f is None }})
    r"""List of object containing the `file_id` and `name` of a file. This is used to associate an answer with its source files."""
    meta: Optional[MetadataOfFile] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('meta'), 'exclude': lambda f: f is None }})
    r"""The metadata of this document."""
    offsets_in_context: Optional[List[DeepsetCloudSpan]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('offsets_in_context'), 'exclude': lambda f: f is None }})
    r"""Offsets of the answer in the context."""
    offsets_in_document: Optional[List[DeepsetCloudSpan]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('offsets_in_document'), 'exclude': lambda f: f is None }})
    r"""Offsets of the answer in the document."""
    prompt: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('prompt'), 'exclude': lambda f: f is None }})
    r"""The prompt that was used to generate the result."""
    result_id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('result_id'), 'exclude': lambda f: f is None }})
    r"""Unique identifier of the result."""
    score: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('score'), 'exclude': lambda f: f is None }})
    r"""Score of the answer."""
    

