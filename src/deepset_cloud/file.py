"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from .sdkconfiguration import SDKConfiguration
from deepset_cloud import utils
from deepset_cloud.models import errors, operations, shared
from typing import Any, Dict, Optional

class File:
    sdk_configuration: SDKConfiguration

    def __init__(self, sdk_config: SDKConfiguration) -> None:
        self.sdk_configuration = sdk_config
        
    
    def delete_multi(self, workspace_name: str, request_body: Optional[operations.DeleteFilesAPIV1WorkspacesWorkspaceNameFilesDeleteFileNames] = None) -> operations.DeleteFilesAPIV1WorkspacesWorkspaceNameFilesDeleteResponse:
        r"""Delete Files
        Deletes files in a workspace. Deletes all files if no file_names provided.
        """
        request = operations.DeleteFilesAPIV1WorkspacesWorkspaceNameFilesDeleteRequest(
            workspace_name=workspace_name,
            request_body=request_body,
        )
        
        base_url = utils.template_url(*self.sdk_configuration.get_server_details())
        
        url = utils.generate_url(operations.DeleteFilesAPIV1WorkspacesWorkspaceNameFilesDeleteRequest, base_url, '/api/v1/workspaces/{workspace_name}/files', request)
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "request_body", False, True, 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        headers['Accept'] = 'application/json'
        headers['user-agent'] = self.sdk_configuration.user_agent
        
        client = self.sdk_configuration.security_client
        
        http_res = client.request('DELETE', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.DeleteFilesAPIV1WorkspacesWorkspaceNameFilesDeleteResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[Any])
                res.delete_files_api_v1_workspaces_workspace_name_files_delete_200_application_json_any = out
            else:
                raise errors.SDKError(f'unknown content-type received: {content_type}', http_res.status_code, http_res.text, http_res)
        elif http_res.status_code == 422:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.HTTPValidationError])
                res.http_validation_error = out
            else:
                raise errors.SDKError(f'unknown content-type received: {content_type}', http_res.status_code, http_res.text, http_res)

        return res

    
    def delete_single(self, file_id: str, workspace_name: str) -> operations.DeleteFileAPIV1WorkspacesWorkspaceNameFilesFileIDDeleteResponse:
        r"""Delete File
        Removes the file from the workspace.
        """
        request = operations.DeleteFileAPIV1WorkspacesWorkspaceNameFilesFileIDDeleteRequest(
            file_id=file_id,
            workspace_name=workspace_name,
        )
        
        base_url = utils.template_url(*self.sdk_configuration.get_server_details())
        
        url = utils.generate_url(operations.DeleteFileAPIV1WorkspacesWorkspaceNameFilesFileIDDeleteRequest, base_url, '/api/v1/workspaces/{workspace_name}/files/{file_id}', request)
        headers = {}
        headers['Accept'] = 'application/json'
        headers['user-agent'] = self.sdk_configuration.user_agent
        
        client = self.sdk_configuration.security_client
        
        http_res = client.request('DELETE', url, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.DeleteFileAPIV1WorkspacesWorkspaceNameFilesFileIDDeleteResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[Any])
                res.delete_file_api_v1_workspaces_workspace_name_files_file_id_delete_200_application_json_any = out
            else:
                raise errors.SDKError(f'unknown content-type received: {content_type}', http_res.status_code, http_res.text, http_res)
        elif http_res.status_code == 422:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.HTTPValidationError])
                res.http_validation_error = out
            else:
                raise errors.SDKError(f'unknown content-type received: {content_type}', http_res.status_code, http_res.text, http_res)

        return res

    
    def get(self, file_id: str, workspace_name: str) -> operations.GetFileAPIV1WorkspacesWorkspaceNameFilesFileIDGetResponse:
        r"""Get File
        Retrieves the file contents.
        """
        request = operations.GetFileAPIV1WorkspacesWorkspaceNameFilesFileIDGetRequest(
            file_id=file_id,
            workspace_name=workspace_name,
        )
        
        base_url = utils.template_url(*self.sdk_configuration.get_server_details())
        
        url = utils.generate_url(operations.GetFileAPIV1WorkspacesWorkspaceNameFilesFileIDGetRequest, base_url, '/api/v1/workspaces/{workspace_name}/files/{file_id}', request)
        headers = {}
        headers['Accept'] = 'application/json'
        headers['user-agent'] = self.sdk_configuration.user_agent
        
        client = self.sdk_configuration.security_client
        
        http_res = client.request('GET', url, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetFileAPIV1WorkspacesWorkspaceNameFilesFileIDGetResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[Any])
                res.get_file_api_v1_workspaces_workspace_name_files_file_id_get_200_application_json_any = out
            else:
                raise errors.SDKError(f'unknown content-type received: {content_type}', http_res.status_code, http_res.text, http_res)
        elif http_res.status_code == 422:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.HTTPValidationError])
                res.http_validation_error = out
            else:
                raise errors.SDKError(f'unknown content-type received: {content_type}', http_res.status_code, http_res.text, http_res)

        return res

    
    def get_document(self, file_id: str, workspace_name: str) -> operations.GetDocumentAPIV1WorkspacesWorkspaceNameFilesFileIDDocumentsGetResponse:
        r"""Get Document
        Returns all documents generated for a file.
        """
        request = operations.GetDocumentAPIV1WorkspacesWorkspaceNameFilesFileIDDocumentsGetRequest(
            file_id=file_id,
            workspace_name=workspace_name,
        )
        
        base_url = utils.template_url(*self.sdk_configuration.get_server_details())
        
        url = utils.generate_url(operations.GetDocumentAPIV1WorkspacesWorkspaceNameFilesFileIDDocumentsGetRequest, base_url, '/api/v1/workspaces/{workspace_name}/files/{file_id}/documents', request)
        headers = {}
        headers['Accept'] = 'application/json'
        headers['user-agent'] = self.sdk_configuration.user_agent
        
        client = self.sdk_configuration.security_client
        
        http_res = client.request('GET', url, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetDocumentAPIV1WorkspacesWorkspaceNameFilesFileIDDocumentsGetResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.Documents])
                res.documents = out
            else:
                raise errors.SDKError(f'unknown content-type received: {content_type}', http_res.status_code, http_res.text, http_res)
        elif http_res.status_code == 422:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.HTTPValidationError])
                res.http_validation_error = out
            else:
                raise errors.SDKError(f'unknown content-type received: {content_type}', http_res.status_code, http_res.text, http_res)

        return res

    
    def get_meta_data(self, file_id: str, workspace_name: str) -> operations.GetFileMetaAPIV1WorkspacesWorkspaceNameFilesFileIDMetaGetResponse:
        r"""Get File Meta
        Displays the metadata of a file.
        """
        request = operations.GetFileMetaAPIV1WorkspacesWorkspaceNameFilesFileIDMetaGetRequest(
            file_id=file_id,
            workspace_name=workspace_name,
        )
        
        base_url = utils.template_url(*self.sdk_configuration.get_server_details())
        
        url = utils.generate_url(operations.GetFileMetaAPIV1WorkspacesWorkspaceNameFilesFileIDMetaGetRequest, base_url, '/api/v1/workspaces/{workspace_name}/files/{file_id}/meta', request)
        headers = {}
        headers['Accept'] = 'application/json'
        headers['user-agent'] = self.sdk_configuration.user_agent
        
        client = self.sdk_configuration.security_client
        
        http_res = client.request('GET', url, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetFileMetaAPIV1WorkspacesWorkspaceNameFilesFileIDMetaGetResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.GetFileMetaAPIV1WorkspacesWorkspaceNameFilesFileIDMetaGetResponseGetFileMetaAPIV1WorkspacesWorkspaceNameFilesFileIDMetaGet])
                res.response_get_file_meta_api_v1_workspaces_workspace_name_files_file_id_meta_get = out
            else:
                raise errors.SDKError(f'unknown content-type received: {content_type}', http_res.status_code, http_res.text, http_res)
        elif http_res.status_code == 422:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.HTTPValidationError])
                res.http_validation_error = out
            else:
                raise errors.SDKError(f'unknown content-type received: {content_type}', http_res.status_code, http_res.text, http_res)

        return res

    
    def list(self, request: operations.ListFilesAPIV1WorkspacesWorkspaceNameFilesGetRequest) -> operations.ListFilesAPIV1WorkspacesWorkspaceNameFilesGetResponse:
        r"""List Files
        List files in a workspace. This endpoint supports pagination and filtering by name and metadata.
        """
        base_url = utils.template_url(*self.sdk_configuration.get_server_details())
        
        url = utils.generate_url(operations.ListFilesAPIV1WorkspacesWorkspaceNameFilesGetRequest, base_url, '/api/v1/workspaces/{workspace_name}/files', request)
        headers = {}
        query_params = utils.get_query_params(operations.ListFilesAPIV1WorkspacesWorkspaceNameFilesGetRequest, request)
        headers['Accept'] = 'application/json'
        headers['user-agent'] = self.sdk_configuration.user_agent
        
        client = self.sdk_configuration.security_client
        
        http_res = client.request('GET', url, params=query_params, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.ListFilesAPIV1WorkspacesWorkspaceNameFilesGetResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.FilePagination])
                res.file_pagination = out
            else:
                raise errors.SDKError(f'unknown content-type received: {content_type}', http_res.status_code, http_res.text, http_res)
        elif http_res.status_code == 422:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.HTTPValidationError])
                res.http_validation_error = out
            else:
                raise errors.SDKError(f'unknown content-type received: {content_type}', http_res.status_code, http_res.text, http_res)

        return res

    
    def update_meta_data(self, request_body: operations.UpdateFileMetaAPIV1WorkspacesWorkspaceNameFilesFileIDMetaPutMeta, file_id: str, workspace_name: str) -> operations.UpdateFileMetaAPIV1WorkspacesWorkspaceNameFilesFileIDMetaPutResponse:
        r"""Update File Meta
        Updates the metadata of a file. You can modify existing metadata or add new ones. The metadata of the documents that were created
        from this file will also be updated.
        """
        request = operations.UpdateFileMetaAPIV1WorkspacesWorkspaceNameFilesFileIDMetaPutRequest(
            request_body=request_body,
            file_id=file_id,
            workspace_name=workspace_name,
        )
        
        base_url = utils.template_url(*self.sdk_configuration.get_server_details())
        
        url = utils.generate_url(operations.UpdateFileMetaAPIV1WorkspacesWorkspaceNameFilesFileIDMetaPutRequest, base_url, '/api/v1/workspaces/{workspace_name}/files/{file_id}/meta', request)
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "request_body", False, False, 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        headers['Accept'] = 'application/json'
        headers['user-agent'] = self.sdk_configuration.user_agent
        
        client = self.sdk_configuration.security_client
        
        http_res = client.request('PUT', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.UpdateFileMetaAPIV1WorkspacesWorkspaceNameFilesFileIDMetaPutResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[Any])
                res.update_file_meta_api_v1_workspaces_workspace_name_files_file_id_meta_put_200_application_json_any = out
            else:
                raise errors.SDKError(f'unknown content-type received: {content_type}', http_res.status_code, http_res.text, http_res)
        elif http_res.status_code == 422:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.HTTPValidationError])
                res.http_validation_error = out
            else:
                raise errors.SDKError(f'unknown content-type received: {content_type}', http_res.status_code, http_res.text, http_res)

        return res

    
    def upload(self, workspace_name: str, body_upload_file_api_v1_workspaces_workspace_name_files_post: Optional[shared.BodyUploadFileAPIV1WorkspacesWorkspaceNameFilesPost] = None, file_name: Optional[str] = None, write_mode: Optional[operations.UploadFileAPIV1WorkspacesWorkspaceNameFilesPostWriteModeFileWriteModeEnum] = None) -> operations.UploadFileAPIV1WorkspacesWorkspaceNameFilesPostResponse:
        r"""Upload File
        Uploads a file into the workspace. You can also use this endpoint to create a text file. To do that, enter the file name and text as its contents.
        """
        request = operations.UploadFileAPIV1WorkspacesWorkspaceNameFilesPostRequest(
            workspace_name=workspace_name,
            body_upload_file_api_v1_workspaces_workspace_name_files_post=body_upload_file_api_v1_workspaces_workspace_name_files_post,
            file_name=file_name,
            write_mode=write_mode,
        )
        
        base_url = utils.template_url(*self.sdk_configuration.get_server_details())
        
        url = utils.generate_url(operations.UploadFileAPIV1WorkspacesWorkspaceNameFilesPostRequest, base_url, '/api/v1/workspaces/{workspace_name}/files', request)
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "body_upload_file_api_v1_workspaces_workspace_name_files_post", False, True, 'multipart')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        query_params = utils.get_query_params(operations.UploadFileAPIV1WorkspacesWorkspaceNameFilesPostRequest, request)
        headers['Accept'] = 'application/json'
        headers['user-agent'] = self.sdk_configuration.user_agent
        
        client = self.sdk_configuration.security_client
        
        http_res = client.request('POST', url, params=query_params, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.UploadFileAPIV1WorkspacesWorkspaceNameFilesPostResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 201:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[Dict[str, str]])
                res.response_upload_file_api_v1_workspaces_workspace_name_files_post = out
            else:
                raise errors.SDKError(f'unknown content-type received: {content_type}', http_res.status_code, http_res.text, http_res)
        elif http_res.status_code in [400, 409, 413, 415]:
            pass
        elif http_res.status_code == 422:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.HTTPValidationError])
                res.http_validation_error = out
            else:
                raise errors.SDKError(f'unknown content-type received: {content_type}', http_res.status_code, http_res.text, http_res)

        return res

    