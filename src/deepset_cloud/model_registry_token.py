"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

import requests as requests_http
from . import utils
from deepset_cloud.models import operations, shared
from typing import Any, Optional

class ModelRegistryToken:
    _client: requests_http.Session
    _security_client: requests_http.Session
    _server_url: str
    _language: str
    _sdk_version: str
    _gen_version: str

    def __init__(self, client: requests_http.Session, security_client: requests_http.Session, server_url: str, language: str, sdk_version: str, gen_version: str) -> None:
        self._client = client
        self._security_client = security_client
        self._server_url = server_url
        self._language = language
        self._sdk_version = sdk_version
        self._gen_version = gen_version
        
    
    def get(self, request: operations.GetTokenAPIV1ModelRegistryTokensProviderGetRequest, security: operations.GetTokenAPIV1ModelRegistryTokensProviderGetSecurity) -> operations.GetTokenAPIV1ModelRegistryTokensProviderGetResponse:
        r"""Get Token [private]
        Returns the model token. This is an endpoint we use internally. This means it can change anytime so bear this in mind if you want to use it.
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetTokenAPIV1ModelRegistryTokensProviderGetRequest, base_url, '/api/v1/model_registry_tokens/{provider}', request)
        headers = {}
        headers['user-agent'] = f'speakeasy-sdk/{self._language} {self._sdk_version} {self._gen_version}'
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetTokenAPIV1ModelRegistryTokensProviderGetResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.ModelRegistryToken])
                res.model_registry_token = out
        elif http_res.status_code == 422:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.HTTPValidationError])
                res.http_validation_error = out

        return res

    
    def get_token_deprecated(self, security: operations.GetTokenDeprecatedAPIV1ModelRegistryTokenGetSecurity) -> operations.GetTokenDeprecatedAPIV1ModelRegistryTokenGetResponse:
        r"""Get Token Deprecated [private]
        Returns the Hugging Face model token. This is an endpoint we use internally. This means it can change anytime so bear this in mind if you want to use it.
        
        Deprecated: this method will be removed in a future release, please migrate away from it as soon as possible
        """
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/api/v1/model_registry_token'
        headers = {}
        headers['user-agent'] = f'speakeasy-sdk/{self._language} {self._sdk_version} {self._gen_version}'
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetTokenDeprecatedAPIV1ModelRegistryTokenGetResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.ModelRegistryToken])
                res.model_registry_token = out

        return res

    
    def list(self, security: operations.ListTokensAPIV1ModelRegistryTokensGetSecurity) -> operations.ListTokensAPIV1ModelRegistryTokensGetResponse:
        r"""Get Tokens [private]
        Returns the model tokens. This is an endpoint we use internally. This means it can change anytime so bear this in mind if you want to use it.
        """
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/api/v1/model_registry_tokens'
        headers = {}
        headers['user-agent'] = f'speakeasy-sdk/{self._language} {self._sdk_version} {self._gen_version}'
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.ListTokensAPIV1ModelRegistryTokensGetResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[list[shared.ModelRegistryToken]])
                res.model_registry_tokens = out

        return res

    
    def remove(self, request: operations.RemoveTokenAPIV1ModelRegistryTokensProviderDeleteRequest, security: operations.RemoveTokenAPIV1ModelRegistryTokensProviderDeleteSecurity) -> operations.RemoveTokenAPIV1ModelRegistryTokensProviderDeleteResponse:
        r"""Remove Token [private]
        Deletes the model token from deepset Cloud. This is an endpoint we use internally. This means it can change anytime so bear this in mind if you want to use it.
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.RemoveTokenAPIV1ModelRegistryTokensProviderDeleteRequest, base_url, '/api/v1/model_registry_tokens/{provider}', request)
        headers = {}
        headers['user-agent'] = f'speakeasy-sdk/{self._language} {self._sdk_version} {self._gen_version}'
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('DELETE', url, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.RemoveTokenAPIV1ModelRegistryTokensProviderDeleteResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 202:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[Any])
                res.remove_token_api_v1_model_registry_tokens_provider_delete_202_application_json_any = out
        elif http_res.status_code == 422:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.HTTPValidationError])
                res.http_validation_error = out

        return res

    
    def remove_token_deprecated(self, security: operations.RemoveTokenDeprecatedAPIV1ModelRegistryTokenDeleteSecurity) -> operations.RemoveTokenDeprecatedAPIV1ModelRegistryTokenDeleteResponse:
        r"""Remove Token Deprecated [private]
        Deletes the Hugging Face model token from deepset Cloud. This is an endpoint we use internally. This means it can change anytime so bear this in mind if you want to use it.
        
        Deprecated: this method will be removed in a future release, please migrate away from it as soon as possible
        """
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/api/v1/model_registry_token'
        headers = {}
        headers['user-agent'] = f'speakeasy-sdk/{self._language} {self._sdk_version} {self._gen_version}'
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('DELETE', url, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.RemoveTokenDeprecatedAPIV1ModelRegistryTokenDeleteResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 202:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[Any])
                res.remove_token_deprecated_api_v1_model_registry_token_delete_202_application_json_any = out

        return res

    
    def save(self, request: operations.SaveTokenAPIV1ModelRegistryTokensProviderPostRequest, security: operations.SaveTokenAPIV1ModelRegistryTokensProviderPostSecurity) -> operations.SaveTokenAPIV1ModelRegistryTokensProviderPostResponse:
        r"""Save Token [private]
        Imports your model token and saves it in deepset Cloud. This is an endpoint we use internally. This means it can change anytime so bear this in mind if you want to use it.
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.SaveTokenAPIV1ModelRegistryTokensProviderPostRequest, base_url, '/api/v1/model_registry_tokens/{provider}', request)
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "create_model_registry_token", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        headers['user-agent'] = f'speakeasy-sdk/{self._language} {self._sdk_version} {self._gen_version}'
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('POST', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.SaveTokenAPIV1ModelRegistryTokensProviderPostResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 201:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[Any])
                res.save_token_api_v1_model_registry_tokens_provider_post_201_application_json_any = out
        elif http_res.status_code == 422:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.HTTPValidationError])
                res.http_validation_error = out

        return res

    
    def save_token_deprecated(self, request: shared.CreateModelRegistryToken, security: operations.SaveTokenDeprecatedAPIV1ModelRegistryTokenPostSecurity) -> operations.SaveTokenDeprecatedAPIV1ModelRegistryTokenPostResponse:
        r"""Save Token Deprecated [private]
        Imports your Hugging Face model token and saves it in deepset Cloud. This is an endpoint we use internally. This means it can change anytime so bear this in mind if you want to use it.
        
        Deprecated: this method will be removed in a future release, please migrate away from it as soon as possible
        """
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/api/v1/model_registry_token'
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "request", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        headers['user-agent'] = f'speakeasy-sdk/{self._language} {self._sdk_version} {self._gen_version}'
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('POST', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.SaveTokenDeprecatedAPIV1ModelRegistryTokenPostResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 201:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[Any])
                res.save_token_deprecated_api_v1_model_registry_token_post_201_application_json_any = out
        elif http_res.status_code == 422:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.HTTPValidationError])
                res.http_validation_error = out

        return res

    
    def update(self, request: operations.UpdateTokenAPIV1ModelRegistryTokensProviderPutRequest, security: operations.UpdateTokenAPIV1ModelRegistryTokensProviderPutSecurity) -> operations.UpdateTokenAPIV1ModelRegistryTokensProviderPutResponse:
        r"""Update Token [private]
        Replaces the current model token with a new one. This is an endpoint we use internally. This means it can change anytime so bear this in mind if you want to use it.
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.UpdateTokenAPIV1ModelRegistryTokensProviderPutRequest, base_url, '/api/v1/model_registry_tokens/{provider}', request)
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "update_model_registry_token", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        headers['user-agent'] = f'speakeasy-sdk/{self._language} {self._sdk_version} {self._gen_version}'
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('PUT', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.UpdateTokenAPIV1ModelRegistryTokensProviderPutResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 201:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[Any])
                res.update_token_api_v1_model_registry_tokens_provider_put_201_application_json_any = out
        elif http_res.status_code == 422:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.HTTPValidationError])
                res.http_validation_error = out

        return res

    
    def update_token_deprecated(self, request: shared.UpdateModelRegistryToken, security: operations.UpdateTokenDeprecatedAPIV1ModelRegistryTokenPutSecurity) -> operations.UpdateTokenDeprecatedAPIV1ModelRegistryTokenPutResponse:
        r"""Update Token Deprecated [private]
        Replaces the current Hugging Face model token with a new one. This is an endpoint we use internally. This means it can change anytime so bear this in mind if you want to use it.
        
        Deprecated: this method will be removed in a future release, please migrate away from it as soon as possible
        """
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/api/v1/model_registry_token'
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "request", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        headers['user-agent'] = f'speakeasy-sdk/{self._language} {self._sdk_version} {self._gen_version}'
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('PUT', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.UpdateTokenDeprecatedAPIV1ModelRegistryTokenPutResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 201:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[Any])
                res.update_token_deprecated_api_v1_model_registry_token_put_201_application_json_any = out
        elif http_res.status_code == 422:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.HTTPValidationError])
                res.http_validation_error = out

        return res

    