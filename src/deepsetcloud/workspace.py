"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

import requests as requests_http
from . import utils
from deepsetcloud.models import operations, shared
from typing import Any, Optional

class Workspace:
    _client: requests_http.Session
    _security_client: requests_http.Session
    _server_url: str
    _language: str
    _sdk_version: str
    _gen_version: str

    def __init__(self, client: requests_http.Session, security_client: requests_http.Session, server_url: str, language: str, sdk_version: str, gen_version: str) -> None:
        self._client = client
        self._security_client = security_client
        self._server_url = server_url
        self._language = language
        self._sdk_version = sdk_version
        self._gen_version = gen_version
        
    
    def create(self, request: shared.WorkspaceName, security: operations.CreateWorkspaceAPIV1WorkspacesPostSecurity) -> operations.CreateWorkspaceAPIV1WorkspacesPostResponse:
        r"""Create Workspace [private]
        This is an endpoint we use internally. This means it can change anytime so bear this in mind if you want to use it.
        """
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/api/v1/workspaces'
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "request", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('POST', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.CreateWorkspaceAPIV1WorkspacesPostResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 201:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[Any])
                res.create_workspace_api_v1_workspaces_post_201_application_json_any = out
        elif http_res.status_code == 422:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.HTTPValidationError])
                res.http_validation_error = out

        return res

    
    def delete(self, request: operations.DeleteWorkspaceAPIV1WorkspacesWorkspaceNameDeleteRequest, security: operations.DeleteWorkspaceAPIV1WorkspacesWorkspaceNameDeleteSecurity) -> operations.DeleteWorkspaceAPIV1WorkspacesWorkspaceNameDeleteResponse:
        r"""Delete Workspace [private]
        Deletes a workspace and everything that is associated with it. Be careful as this action cannot be undone. This is an endpoint we use internally. This means it can change anytime so bear this in mind if you want to use it.
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.DeleteWorkspaceAPIV1WorkspacesWorkspaceNameDeleteRequest, base_url, '/api/v1/workspaces/{workspace_name}', request)
        
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('DELETE', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.DeleteWorkspaceAPIV1WorkspacesWorkspaceNameDeleteResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 204:
            pass
        elif http_res.status_code == 422:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.HTTPValidationError])
                res.http_validation_error = out

        return res

    
    def get(self, request: operations.GetWorkspaceStatsAPIV1WorkspacesWorkspaceNameStatsGetRequest, security: operations.GetWorkspaceStatsAPIV1WorkspacesWorkspaceNameStatsGetSecurity) -> operations.GetWorkspaceStatsAPIV1WorkspacesWorkspaceNameStatsGetResponse:
        r"""Get Workspace Stats [private]
        Displays the number of files and documents in a workspace, the number of search requests, and the average response time. This is an endpoint we use internally. This means it can change anytime so bear this in mind if you want to use it.
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetWorkspaceStatsAPIV1WorkspacesWorkspaceNameStatsGetRequest, base_url, '/api/v1/workspaces/{workspace_name}/stats', request)
        
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetWorkspaceStatsAPIV1WorkspacesWorkspaceNameStatsGetResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.WorkspaceStats])
                res.workspace_stats = out
        elif http_res.status_code == 422:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.HTTPValidationError])
                res.http_validation_error = out

        return res

    
    def get(self, request: operations.GetWorkspaceAPIV1WorkspacesWorkspaceNameGetRequest, security: operations.GetWorkspaceAPIV1WorkspacesWorkspaceNameGetSecurity) -> operations.GetWorkspaceAPIV1WorkspacesWorkspaceNameGetResponse:
        r"""Get Workspace [private]
        Returns the workspace and its properties. This is an endpoint we use internally. This means it can change anytime so bear this in mind if you want to use it.
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetWorkspaceAPIV1WorkspacesWorkspaceNameGetRequest, base_url, '/api/v1/workspaces/{workspace_name}', request)
        
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetWorkspaceAPIV1WorkspacesWorkspaceNameGetResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.Workspace])
                res.workspace = out
        elif http_res.status_code == 422:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.HTTPValidationError])
                res.http_validation_error = out

        return res

    
    def list(self, security: operations.ListWorkspacesAPIV1WorkspacesGetSecurity) -> operations.ListWorkspacesAPIV1WorkspacesGetResponse:
        r"""List Workspaces [private]
        Lists all deepset Cloud workspaces and their properties. This is an endpoint we use internally. This means it can change anytime so bear this in mind if you want to use it.
        """
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/api/v1/workspaces'
        
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.ListWorkspacesAPIV1WorkspacesGetResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[list[shared.Workspace]])
                res.workspace_list = out

        return res

    
    def search_count(self, request: operations.SearchCountAPIV1WorkspacesWorkspaceNameSearchCountGetRequest, security: operations.SearchCountAPIV1WorkspacesWorkspaceNameSearchCountGetSecurity) -> operations.SearchCountAPIV1WorkspacesWorkspaceNameSearchCountGetResponse:
        r"""Search Count [private]
        Returns the number of search requests on a given day for a specified period of time. This is an endpoint we use internally. This means it can change anytime so bear this in mind if you want to use it.
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.SearchCountAPIV1WorkspacesWorkspaceNameSearchCountGetRequest, base_url, '/api/v1/workspaces/{workspace_name}/search_count', request)
        
        query_params = utils.get_query_params(operations.SearchCountAPIV1WorkspacesWorkspaceNameSearchCountGetRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.SearchCountAPIV1WorkspacesWorkspaceNameSearchCountGetResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.SearchCountPagination])
                res.search_count_pagination = out
        elif http_res.status_code == 422:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.HTTPValidationError])
                res.http_validation_error = out

        return res

    
    def search_history(self, request: operations.SearchHistoryAPIV1WorkspacesWorkspaceNameSearchHistoryGetRequest, security: operations.SearchHistoryAPIV1WorkspacesWorkspaceNameSearchHistoryGetSecurity) -> operations.SearchHistoryAPIV1WorkspacesWorkspaceNameSearchHistoryGetResponse:
        r"""Search History [private]
        Returns the search history which includes information such as the query, the answer, the pipeline used, and more. This is an endpoint we use internally. This means it can change anytime so bear this in mind if you want to use it.
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.SearchHistoryAPIV1WorkspacesWorkspaceNameSearchHistoryGetRequest, base_url, '/api/v1/workspaces/{workspace_name}/search_history', request)
        
        query_params = utils.get_query_params(operations.SearchHistoryAPIV1WorkspacesWorkspaceNameSearchHistoryGetRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.SearchHistoryAPIV1WorkspacesWorkspaceNameSearchHistoryGetResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.SearchHistoryPagination])
                res.search_history_pagination = out
        elif http_res.status_code == 422:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.HTTPValidationError])
                res.http_validation_error = out

        return res

    