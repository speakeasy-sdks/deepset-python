"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from dataclasses_json import Undefined, dataclass_json
from deepsetcloud import utils
from enum import Enum
from typing import Any, Optional

class LabelLabelStateAsStrEnum(str, Enum):
    r"""An enumeration."""
    MATCHING_NOT_STARTED = 'MATCHING_NOT_STARTED'
    MATCHED = 'MATCHED'
    NO_MATCH_FOUND = 'NO_MATCH_FOUND'
    CANDIDATES_FOUND = 'CANDIDATES_FOUND'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class Label:
    
    label_id: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('label_id') }})
    r"""Unique identifier of a label"""
    meta: dict[str, Any] = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('meta') }})
    query: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('query') }})
    state: LabelLabelStateAsStrEnum = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('state') }})
    r"""Represents the current state for matching a file."""
    answer: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('answer'), 'exclude': lambda f: f is None }})
    answer_end: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('answer_end'), 'exclude': lambda f: f is None }})
    answer_start: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('answer_start'), 'exclude': lambda f: f is None }})
    candidates: Optional[dict[str, float]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('candidates'), 'exclude': lambda f: f is None }})
    r"""A dictionary that holds the UUID as key and score as value for each candidate in the label to file matching."""
    context: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('context'), 'exclude': lambda f: f is None }})
    external_file_name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('external_file_name'), 'exclude': lambda f: f is None }})
    file_id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('file_id'), 'exclude': lambda f: f is None }})
    filters: Optional[dict[str, Any]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('filters'), 'exclude': lambda f: f is None }})
    r"""Filters you can use to narrow down the search. For more information, see [metadata filtering](https://docs.haystack.deepset.ai/docs/metadata-filtering)."""
    